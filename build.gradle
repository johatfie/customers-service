plugins {
	id 'java'
	id 'idea'

	id 'org.springframework.boot' version '2.7.10'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'

	id 'java-library'
	id 'maven-publish'

	id 'io.freefair.lombok' version '6.6.3'
//	id 'com.github.spotbugs' version '5.0.5'
//	id 'info.solidsoft.pitest' version '1.7.0' apply false
//	id 'org.sonarqube' version '3.3' apply false
}

group = 'com.widgets_are_us'
version = '0.0.1-SNAPSHOT'
description = 'customers-service'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}

repositories {
//	mavenCentral()
	mavenLocal()
	maven {
		url = uri('https://repo.maven.apache.org/maven2/')
	}
}

ext {

	dockerFileMavenPlugin = '1.4.13'
	h2Version = '2.1.214'
	log4jVersion = '2.17.2'
	logbackEncoderVersion = '7.3'
	postgresqlVersion = '42.3.8'
	springCloudVersion = '2021.0.6'

}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation('org.springframework.boot:spring-boot-starter-log4j2')
	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation 'org.springframework.cloud:spring-cloud-sleuth-zipkin'
	implementation 'org.springframework.cloud:spring-cloud-starter-bus-amqp'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
	implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client') {
		exclude group: 'org.springframework.cloud', module: 'spring-cloud-starter-ribbon'
		exclude group: 'com.netflix.ribbon', module: 'ribbon-eureka'
	}
	implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'

	implementation "net.logstash.logback:logstash-logback-encoder:${logbackEncoderVersion}"

//	implementation "com.spotify:dockerfile-maven-plugin:${dockerFileMavenPlugin}"

	implementation("org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}")
	implementation("org.apache.logging.log4j:log4j-api:${log4jVersion}")
	implementation("org.apache.logging.log4j:log4j-core:${log4jVersion}")


	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	runtimeOnly("com.lmax:disruptor:3.4.4")

	runtimeOnly "com.h2database:h2:${h2Version}"
	runtimeOnly "org.postgresql:postgresql:${postgresqlVersion}"

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

//	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Test dependencies
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'junit', module: 'junit'
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation('org.mockito:mockito-core:4.2.+')
	testImplementation('org.mockito:mockito-junit-jupiter:4.2.+')

}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

publishing {
	publications {
		maven(MavenPublication) {
			from(components.java)
		}
	}
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
	options.encoding = 'UTF-8'
}

tasks.named('test') {
	useJUnitPlatform()
}
